{"version":3,"sources":["components/InputBox.js","components/TodoInput.js","components/TodoItem.js","constants/actions.js","components/TodoList.js","components/InfoBox.js","components/TodoContainer.js","App.js","serviceWorker.js","index.js"],"names":["InputBox","_ref","onEnter","placeholder","react_default","a","createElement","type","className","onKeyDown","ev","text","target","value","trim","which","TodoInput","onActivateAll","onClick","components_InputBox","TodoItem","todo","onToggle","onRemove","completed","checked","id","onChange","Actions","ACTIVE_TODO","COMPLETE_TODO","ALL_TODO","TodoList","filteredTodos","todos","activeState","onStateUpdate","handleToggle","updatedTodos","map","Object","objectSpread","handleRemove","filter","todoItems","components_TodoItem","key","InfoBox","onFilterUpdate","onClearcompleted","getRemainingCount","showClearCompleted","TodoContainer","props","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleActivateAll","update","state","handleTodoListUpdate","handleAddTodo","getUuid","toConsumableArray","concat","setState","handleClearcompleted","handleFilter","updatedState","length","shouldShowClearCompleted","components_TodoInput","components_TodoList","components_InfoBox","Component","App","TodoContainer_TodoContainer","Boolean","window","location","hostname","match","ReactDOM","render","App_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.34f380cf.chunk.js","sourcesContent":["import React from 'react'\nimport './styles.css';\n\nconst InputBox = ({onEnter, placeholder}) => {\n\n    const handleKeyDown = function(ev) {\n        const text = ev.target.value.trim();\n      \n        if( ev.which === 13 && text ) {\n            onEnter(text);\n            ev.target.value = '';\n        }\n    }\n\n    return (\n        <input type=\"text\" \n               className=\"todo-bar\" \n               placeholder={placeholder}\n               onKeyDown={ handleKeyDown } />\n    )\n}\n\nexport default InputBox;","import React from 'react'\nimport './styles.css';\nimport InputBox from './InputBox'\n\nconst TodoInput = ({onEnter, onActivateAll}) => {\n\n    return (\n        <div className=\"todo-bar-container\">\n            <label className=\"activate-all\" onClick={onActivateAll} />\n            <InputBox onEnter={ onEnter } placeholder=\"What needs to be done?\" />\n        </div>\n    )\n}\n\nexport default TodoInput;","import React from 'react'\nimport './styles.css'\n\nconst TodoItem = ({todo, onToggle, onRemove}) => {\n\n    return (\n        <li className={ todo.completed ? 'todo-item todo-completed' : 'todo-item' }>\n            <label className=\"todo-label\">\n                { todo.text }\n                <input type=\"checkbox\"\n                    checked={ todo.completed } \n                    value={ todo.id } \n                    onChange={ onToggle } />\n                <span className=\"checkmark\"></span></label>\n                <button className=\"remove-button fr\"\n                  onClick={() => onRemove(todo.id)} />\n        </li>\n    );\n}\n\nexport default TodoItem;","const Actions = {\n    ACTIVE_TODO: 'ACTIVE_TODO',\n    COMPLETE_TODO: 'COMPLETE_TODO',\n    ALL_TODO: 'ALL_TODO',\n}\n\nexport default Actions;","import React from 'react'\nimport TodoItem from './TodoItem'\nimport './styles.css';\nimport Actions from '../constants/actions';\n\nconst TodoList = ({todos, activeState, onStateUpdate}) => {\n\n    const handleToggle = function(ev) {\n        const id = ev.target.value;\n        const updatedTodos = todos.map(\n          todo =>\n            todo.id === id ? { ...todo, completed: !todo.completed } : todo\n        )\n        onStateUpdate(updatedTodos);\n    }\n\n    const handleRemove = function(id) {\n        const updatedTodos = todos.filter(todo => todo.id !== id)\n        onStateUpdate(updatedTodos);\n    }\n\n    let filteredTodos;\n    switch(activeState) {\n        case Actions.ACTIVE_TODO:\n            filteredTodos = todos.filter(todo => !todo.completed)\n            break;\n        case Actions.COMPLETE_TODO:\n            filteredTodos = todos.filter(todo => todo.completed)\n            break;\n        default:\n            filteredTodos = todos;\n            break;\n    }\n\n    const todoItems = filteredTodos.map((todo) => {\n        return (\n            <TodoItem key={ todo.id }\n                      todo={ todo } \n                      onToggle={ handleToggle } \n                      onRemove={ handleRemove } />\n        );\n    });\n\n    return (\n        <ul className=\"todo-list\">\n            { todoItems }\n        </ul>\n    );\n};\n\nexport default TodoList;\n","import React from 'react'\nimport Actions from '.././constants/actions';\nimport './styles.css';\n\nconst InfoBox = ({activeState, onFilterUpdate, onClearcompleted, getRemainingCount, showClearCompleted}) => {\n    return (\n        <footer className=\"infoBox\">\n            <span className=\"fl\">{ getRemainingCount() } items left </span>\n            <ul className=\"filter-btns\">\n                <li><button className={ activeState === Actions.ALL_TODO ? \"todo-btn todo-active\" : \"todo-btn\"}\n                            onClick={ () => onFilterUpdate(Actions.ALL_TODO) }>All</button></li>\n                <li><button className={ activeState === Actions.ACTIVE_TODO ? \"todo-btn todo-active\" : \"todo-btn\"} \n                            onClick={ () => onFilterUpdate(Actions.ACTIVE_TODO) }>Active</button></li>\n                <li><button className={ activeState === Actions.COMPLETE_TODO ? \"todo-btn todo-active\" : \"todo-btn\"}\n                            onClick={ () => onFilterUpdate(Actions.COMPLETE_TODO) }>Completed</button></li>\n            </ul>\n            {showClearCompleted() &&\n                <button className=\"clear-btn\" onClick={ onClearcompleted }>Clear completed</button>\n            }\n        </footer>\n    )\n}\n\nexport default InfoBox;\n","import React, { Component } from 'react'\nimport './styles.css';\nimport TodoInput from './TodoInput';\nimport TodoList from './TodoList';\nimport InfoBox from './InfoBox';\nimport Actions from '../constants/actions';\nimport getUuid from 'uuid/v4';\n\nexport default class TodoContainer extends Component {\n    \n  constructor(props) {\n      super(props);\n      \n      this.state = {\n          todos: [],\n          activeState: Actions.ALL_TODO,\n      }\n  }\n\n  handleActivateAll = () => {\n    const update = this.getRemainingCount() ? true : false;\n    const todos = this.state.todos.map(todo => { \n        return {...todo, completed: update}\n    });\n    this.handleTodoListUpdate(todos);\n  }\n\n  handleAddTodo = (text) => {\n\n    const id = getUuid();\n    const todos = [\n        ...this.state.todos,\n        {\n            id: id,\n            completed: false,\n            text\n        },\n    ]\n\n    this.handleTodoListUpdate(todos);\n  }\n  \n  handleTodoListUpdate = (todos) => {\n    this.setState({\n        todos: todos\n    });\n  }\n\n  handleClearcompleted = () => {\n    const todos = this.state.todos.filter(todo => !todo.completed)\n    this.handleTodoListUpdate(todos);\n  }\n\n  handleFilter = (updatedState) => {\n      this.setState({\n          activeState: updatedState,\n      });\n  }\n\n  getRemainingCount = () => {\n      return this.state.todos.filter(todo => !todo.completed).length;\n  }\n\n  shouldShowClearCompleted = () => {\n      return this.state.todos.length > 0 && this.getRemainingCount() !==  this.state.todos.length;\n  }\n  \n  render() {\n      const todos = this.state.todos;\n      \n      return (\n          <div className=\"content\">\n              <TodoInput onEnter={ this.handleAddTodo }\n                         onActivateAll={this.handleActivateAll} />\n              <TodoList todos={ todos }\n                        activeState={ this.state.activeState }\n                        onStateUpdate= {this.handleTodoListUpdate } />        \n              <InfoBox activeState={ this.state.activeState }\n                       onFilterUpdate={ this.handleFilter }\n                       onClearcompleted={ this.handleClearcompleted }\n                       getRemainingCount= {this.getRemainingCount}\n                       showClearCompleted={this.shouldShowClearCompleted} />\n          </div>\n      );\n  }\n}\n","import React, { Component } from 'react';\nimport './App.css';\nimport TodoContainer from './components/TodoContainer';\n\n\nexport default class App extends Component {\n  \n  render() {\n      \n      return (\n          <div className=\"app-container\">\n              <div className=\"header\">todos</div>\n              <TodoContainer/>\n          </div>\n      );\n  }\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}