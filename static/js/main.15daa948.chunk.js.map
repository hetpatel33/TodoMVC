{"version":3,"sources":["components/InputBox.js","components/TodoInput.js","components/TodoItem.js","constants/helperFunctions.js","components/TodoList.js","constants/filters.js","components/InfoBox.js","components/TodoContainer.js","App.js","serviceWorker.js","index.js"],"names":["InputBox","_ref","onEnter","placeholder","react_default","a","createElement","type","className","onKeyDown","ev","text","target","value","trim","which","TodoInput","onActivateAll","onClick","components_InputBox","TodoItem","todo","onToggle","onRemove","completed","checked","id","onChange","Helpers","pushTodo","todos","newTodo","Object","toConsumableArray","concat","getRemainingTodos","filter","getCompletedTodos","getRemainingCount","this","length","toggleTodo","map","objectSpread","removeTodo","updateCompletedProperty","updateValue","TodoList","handleToggle","updatedTodos","helperFunctions","_this","props","onStateUpdate","handleRemove","_this2","todoItems","components_TodoItem","key","PureComponent","Filters","InfoBox","activeFilter","onFilterUpdate","onClearcompleted","remainingTodoCount","showClearCompleted","todoFilters","TodoContainer","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","handleActivateAll","update","state","handleTodoListUpdate","handleAddTodo","getUuid","setState","handleClearcompleted","handleFilterUpdate","updatedState","components_TodoInput","TodoList_TodoList","getFilteredTodos","components_InfoBox","shouldShowClearCompleted","Component","App","TodoContainer_TodoContainer","Boolean","window","location","hostname","match","ReactDOM","render","App_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.15daa948.chunk.js","sourcesContent":["import React from 'react'\nimport './styles.css';\n\nconst InputBox = ({onEnter, placeholder}) => {\n\n    const handleKeyDown = function(ev) {\n        const text = ev.target.value.trim();\n      \n        if( ev.which === 13 && text ) {\n            onEnter(text);\n            ev.target.value = '';\n        }\n    }\n\n    return (\n        <input type=\"text\" \n               className=\"todo-bar\" \n               placeholder={placeholder}\n               onKeyDown={ handleKeyDown } />\n    )\n}\n\nexport default InputBox;","import React from 'react'\nimport './styles.css';\nimport InputBox from './InputBox'\n\nconst TodoInput = ({onEnter, onActivateAll}) => {\n\n    return (\n        <div className=\"todo-bar-container\">\n            <label className=\"activate-all\" onClick={onActivateAll}>‚ùØ</label>\n            <InputBox onEnter={ onEnter } placeholder=\"What needs to be done?\" />\n        </div>\n    )\n}\n\nexport default TodoInput;","import React from 'react'\nimport './styles.css'\n\nconst TodoItem = ({todo, onToggle, onRemove}) => {\n\n    return (\n        <li className={ todo.completed ? 'todo-item todo-completed' : 'todo-item' }>\n            <label className=\"todo-label\">\n                { todo.text }\n                <input type=\"checkbox\"\n                    checked={ todo.completed } \n                    value={ todo.id } \n                    onChange={ onToggle } />\n                <span className=\"checkmark\"></span></label>\n                <button className=\"remove-button fr\"\n                  onClick={() => onRemove(todo.id)} />\n        </li>\n    );\n}\n\nexport default TodoItem;","const Helpers = {\n    pushTodo: function(todos, newTodo) {\n        return [\n            ...todos,\n            newTodo,\n        ]\n    },\n\n    getRemainingTodos: function(todos) {\n        return todos.filter(todo => !todo.completed);\n    },\n\n    getCompletedTodos: function(todos) {\n        return todos.filter(todo => todo.completed);\n    },\n\n    getRemainingCount: function(todos) {\n        return this.getRemainingTodos(todos).length;\n    },\n\n    toggleTodo: function(todos, id) {\n        return todos.map(\n            todo =>\n              todo.id === id ? { ...todo, completed: !todo.completed } : todo\n          )\n    },\n\n    removeTodo: function(todos, id) {\n        return todos.filter(todo => todo.id !== id);\n    },\n\n    updateCompletedProperty : function(todos, updateValue) {\n        return todos.map(todo => { \n            return {...todo, completed: updateValue}\n        });\n    },\n}\n\nexport default Helpers;\n","import React, {PureComponent} from 'react'\nimport TodoItem from './TodoItem'\nimport './styles.css';\nimport helperFunctions from '../constants/helperFunctions';\n\nexport default class TodoList extends PureComponent {\n\n    handleToggle = (ev) => {\n        const id = ev.target.value;\n        const updatedTodos = helperFunctions.toggleTodo(this.props.todos, id);\n        this.props.onStateUpdate(updatedTodos);\n    }\n\n    handleRemove = (id) => {\n        const updatedTodos = helperFunctions.removeTodo(this.props.todos, id);\n        this.props.onStateUpdate(updatedTodos);\n    }\n\n    render() {\n        const todoItems = this.props.todos.map((todo) => {\n            return (\n                <TodoItem key={ todo.id }\n                          todo={ todo } \n                          onToggle={ this.handleToggle } \n                          onRemove={ this.handleRemove } />\n            );\n        });\n\n        return (\n            <ul className=\"todo-list\">\n                { todoItems }\n            </ul>\n        );  \n    }\n}\n","const Filters = [\n    {\n        id: 'ALL_TODO',\n        text: 'All',\n    },\n    {\n        id: 'ACTIVE_TODO',\n        text: 'Active',\n    },\n    {\n        id: 'COMPLETE_TODO',\n        text: 'Completed',\n    },\n]\n\nexport default Filters;","import React from 'react'\nimport Filters from '../constants/filters';\nimport './styles.css';\n\nconst InfoBox = ({activeFilter, onFilterUpdate, onClearcompleted, remainingTodoCount, showClearCompleted}) => {\n    const todoFilters = Filters.map((filter) => {\n        return (\n            <li key={filter.id}>\n                <button \n                className={ activeFilter === filter.id ? \"todo-btn todo-active\" : \"todo-btn\"}\n                onClick={ () => onFilterUpdate(filter.id) }>\n                    {filter.text}\n                </button>\n            </li>\n        );\n    });\n\n    return (\n        <footer className=\"infoBox\">\n            <span className=\"fl\">{ remainingTodoCount } items left </span>\n            <ul className=\"filter-btns\">\n                {todoFilters}\n            </ul>\n            {showClearCompleted &&\n                <button className=\"clear-btn\" onClick={ onClearcompleted }>Clear completed</button>\n            }\n        </footer>\n    )\n}\n\nexport default InfoBox;\n","import React, { Component } from 'react'\nimport './styles.css';\nimport TodoInput from './TodoInput';\nimport TodoList from './TodoList';\nimport InfoBox from './InfoBox';\nimport getUuid from 'uuid/v4';\nimport helperFunctions from '../constants/helperFunctions';\n\nexport default class TodoContainer extends Component {\n    \n  constructor(props) {\n      super(props);\n      \n      this.state = {\n          todos: [],\n          activeFilter: 'ALL_TODO',\n      }\n  }\n\n  handleActivateAll = () => {\n    const update = helperFunctions.getRemainingCount(this.state.todos) ? true : false;\n    const todos = helperFunctions.updateCompletedProperty(this.state.todos, update);\n    this.handleTodoListUpdate(todos);\n  }\n\n  handleAddTodo = (text) => {\n\n    const newTodo = {\n        id: getUuid(),\n        completed: false,\n        text\n    };\n    \n    const todos = helperFunctions.pushTodo(this.state.todos, newTodo);\n\n    this.handleTodoListUpdate(todos);\n  }\n  \n  handleTodoListUpdate = (todos) => {\n    this.setState({\n        todos: todos\n    });\n  }\n\n  handleClearcompleted = () => {\n    const todos = helperFunctions.getRemainingTodos(this.state.todos);\n    this.handleTodoListUpdate(todos);\n  }\n\n  handleFilterUpdate = (updatedState) => {\n      this.setState({\n          activeFilter: updatedState,\n      });\n  }\n\n  getFilteredTodos(todos, filter) {\n    switch(filter) {\n        case 'ACTIVE_TODO':\n            return helperFunctions.getRemainingTodos(todos);\n        case 'COMPLETE_TODO':\n            return helperFunctions.getCompletedTodos(todos);\n        default:\n            return todos;\n    }\n  }\n\n  shouldShowClearCompleted() {\n      return this.state.todos.length > 0 && helperFunctions.getRemainingCount(this.state.todos) !==  this.state.todos.length;\n  }\n  \n  render() {\n      const todos = this.state.todos;\n      \n      return (\n        <div className=\"content\">\n            <TodoInput onEnter={ this.handleAddTodo }\n                       onActivateAll={this.handleActivateAll} />\n            <TodoList todos={ this.getFilteredTodos(todos, this.state.activeFilter) }\n                      onStateUpdate= {this.handleTodoListUpdate } />        \n            <InfoBox activeFilter={ this.state.activeFilter }\n                     onFilterUpdate={ this.handleFilterUpdate }\n                     onClearcompleted={ this.handleClearcompleted }\n                     remainingTodoCount= {helperFunctions.getRemainingCount(this.state.todos)}\n                     showClearCompleted={this.shouldShowClearCompleted()} />\n        </div>\n      );\n  }\n}\n","import React, { Component } from 'react';\nimport './App.css';\nimport TodoContainer from './components/TodoContainer';\n\n\nexport default class App extends Component {\n  \n  render() {\n      \n      return (\n          <div className=\"app-container\">\n              <div className=\"header\">todos</div>\n              <TodoContainer/>\n          </div>\n      );\n  }\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}