{"version":3,"sources":["components/InputBox.js","components/TodoInput.js","components/TodoItem.js","constants/helperFunctions.js","components/TodoList.js","constants/actions.js","constants/filters.js","components/InfoBox.js","components/TodoContainer.js","App.js","serviceWorker.js","index.js"],"names":["InputBox","_ref","onEnter","placeholder","react_default","a","createElement","type","className","onKeyDown","ev","text","target","value","trim","which","TodoInput","onActivateAll","onClick","components_InputBox","TodoItem","todo","onToggle","onRemove","completed","checked","id","onChange","Helpers","pushTodo","todos","newTodo","Object","toConsumableArray","concat","getRemainingTodos","filter","getCompletedTodos","getRemainingCount","this","length","toggleTodo","map","objectSpread","removeTodo","updateCompletedProperty","updateValue","TodoList","handleToggle","updatedTodos","helperFunctions","_this","props","onStateUpdate","handleRemove","_this2","todoItems","components_TodoItem","key","PureComponent","Actions","ACTIVE_TODO","COMPLETE_TODO","ALL_TODO","Filters","InfoBox","activeFilter","onFilterUpdate","onClearcompleted","remainingTodoCount","showClearCompleted","todoFilters","TodoContainer","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","handleActivateAll","update","state","handleTodoListUpdate","handleAddTodo","getUuid","setState","handleClearcompleted","handleFilterUpdate","updatedState","components_TodoInput","TodoList_TodoList","getFilteredTodos","components_InfoBox","shouldShowClearCompleted","Component","App","TodoContainer_TodoContainer","Boolean","window","location","hostname","match","ReactDOM","render","App_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.04c4232e.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./styles.css\";\n\nconst InputBox = ({ onEnter, placeholder }) => {\n  const handleKeyDown = function(ev) {\n    const text = ev.target.value.trim();\n\n    if (ev.which === 13 && text) {\n      onEnter(text);\n      ev.target.value = \"\";\n    }\n  };\n\n  return (\n    <input\n      type=\"text\"\n      className=\"todo-bar\"\n      placeholder={placeholder}\n      onKeyDown={handleKeyDown}\n    />\n  );\n};\n\nexport default InputBox;\n","import React from \"react\";\nimport \"./styles.css\";\nimport InputBox from \"./InputBox\";\n\nconst TodoInput = ({ onEnter, onActivateAll }) => {\n  return (\n    <div className=\"todo-bar-container\">\n      <label className=\"activate-all\" onClick={onActivateAll}>\n        ‚ùØ\n      </label>\n      <InputBox onEnter={onEnter} placeholder=\"What needs to be done?\" />\n    </div>\n  );\n};\n\nexport default TodoInput;\n","import React from \"react\";\nimport \"./styles.css\";\n\nconst TodoItem = ({ todo, onToggle, onRemove }) => {\n  return (\n    <li className={todo.completed ? \"todo-item todo-completed\" : \"todo-item\"}>\n      <label className=\"todo-label\">\n        {todo.text}\n        <input\n          type=\"checkbox\"\n          checked={todo.completed}\n          value={todo.id}\n          onChange={onToggle}\n        />\n        <span className=\"checkmark\" />\n      </label>\n      <button className=\"remove-button fr\" onClick={() => onRemove(todo.id)} />\n    </li>\n  );\n};\n\nexport default TodoItem;\n","const Helpers = {\n  pushTodo: function(todos, newTodo) {\n    return [...todos, newTodo];\n  },\n\n  getRemainingTodos: function(todos) {\n    return todos.filter(todo => !todo.completed);\n  },\n\n  getCompletedTodos: function(todos) {\n    return todos.filter(todo => todo.completed);\n  },\n\n  getRemainingCount: function(todos) {\n    return this.getRemainingTodos(todos).length;\n  },\n\n  toggleTodo: function(todos, id) {\n    return todos.map(todo =>\n      todo.id === id ? { ...todo, completed: !todo.completed } : todo\n    );\n  },\n\n  removeTodo: function(todos, id) {\n    return todos.filter(todo => todo.id !== id);\n  },\n\n  updateCompletedProperty: function(todos, updateValue) {\n    return todos.map(todo => {\n      return { ...todo, completed: updateValue };\n    });\n  }\n};\n\nexport default Helpers;\n","import React, { PureComponent } from \"react\";\nimport TodoItem from \"./TodoItem\";\nimport \"./styles.css\";\nimport helperFunctions from \"../constants/helperFunctions\";\n\nexport default class TodoList extends PureComponent {\n  handleToggle = ev => {\n    const id = ev.target.value;\n    const updatedTodos = helperFunctions.toggleTodo(this.props.todos, id);\n    this.props.onStateUpdate(updatedTodos);\n  };\n\n  handleRemove = id => {\n    const updatedTodos = helperFunctions.removeTodo(this.props.todos, id);\n    this.props.onStateUpdate(updatedTodos);\n  };\n\n  render() {\n    const todoItems = this.props.todos.map(todo => {\n      return (\n        <TodoItem\n          key={todo.id}\n          todo={todo}\n          onToggle={this.handleToggle}\n          onRemove={this.handleRemove}\n        />\n      );\n    });\n\n    return <ul className=\"todo-list\">{todoItems}</ul>;\n  }\n}\n","const Actions = {\n  ACTIVE_TODO: \"ACTIVE_TODO\",\n  COMPLETE_TODO: \"COMPLETE_TODO\",\n  ALL_TODO: \"ALL_TODO\"\n};\nexport default Actions;\n","import Actions from \"./actions\";\n\nconst Filters = [\n  {\n    id: Actions.ALL_TODO,\n    text: \"All\"\n  },\n  {\n    id: Actions.ACTIVE_TODO,\n    text: \"Active\"\n  },\n  {\n    id: Actions.COMPLETE_TODO,\n    text: \"Completed\"\n  }\n];\n\nexport default Filters;\n","import React from \"react\";\nimport Filters from \"../constants/filters\";\nimport \"./styles.css\";\n\nconst InfoBox = ({\n  activeFilter,\n  onFilterUpdate,\n  onClearcompleted,\n  remainingTodoCount,\n  showClearCompleted\n}) => {\n  const todoFilters = Filters.map(filter => {\n    return (\n      <li key={filter.id}>\n        <button\n          className={\n            activeFilter === filter.id ? \"todo-btn todo-active\" : \"todo-btn\"\n          }\n          onClick={() => onFilterUpdate(filter.id)}\n        >\n          {filter.text}\n        </button>\n      </li>\n    );\n  });\n\n  return (\n    <footer className=\"infoBox\">\n      <span className=\"fl\">{remainingTodoCount} items left </span>\n      <ul className=\"filter-btns\">{todoFilters}</ul>\n      {showClearCompleted && (\n        <button className=\"clear-btn\" onClick={onClearcompleted}>\n          Clear completed\n        </button>\n      )}\n    </footer>\n  );\n};\n\nexport default InfoBox;\n","import React, { Component } from \"react\";\nimport \"./styles.css\";\nimport TodoInput from \"./TodoInput\";\nimport TodoList from \"./TodoList\";\nimport InfoBox from \"./InfoBox\";\nimport getUuid from \"uuid/v4\";\nimport helperFunctions from \"../constants/helperFunctions\";\nimport Actions from \"../constants/actions\";\n\nexport default class TodoContainer extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      todos: [],\n      activeFilter: Actions.ALL_TODO\n    };\n  }\n\n  handleActivateAll = () => {\n    const update = helperFunctions.getRemainingCount(this.state.todos)\n      ? true\n      : false;\n    const todos = helperFunctions.updateCompletedProperty(\n      this.state.todos,\n      update\n    );\n    this.handleTodoListUpdate(todos);\n  };\n\n  handleAddTodo = text => {\n    const newTodo = {\n      id: getUuid(),\n      completed: false,\n      text\n    };\n\n    const todos = helperFunctions.pushTodo(this.state.todos, newTodo);\n\n    this.handleTodoListUpdate(todos);\n  };\n\n  handleTodoListUpdate = todos => {\n    this.setState({\n      todos: todos\n    });\n  };\n\n  handleClearcompleted = () => {\n    const todos = helperFunctions.getRemainingTodos(this.state.todos);\n    this.handleTodoListUpdate(todos);\n  };\n\n  handleFilterUpdate = updatedState => {\n    this.setState({\n      activeFilter: updatedState\n    });\n  };\n\n  getFilteredTodos(todos, filter) {\n    switch (filter) {\n      case Actions.ACTIVE_TODO:\n        return helperFunctions.getRemainingTodos(todos);\n      case Actions.COMPLETE_TODO:\n        return helperFunctions.getCompletedTodos(todos);\n      default:\n        return todos;\n    }\n  }\n\n  shouldShowClearCompleted() {\n    return (\n      this.state.todos.length > 0 &&\n      helperFunctions.getRemainingCount(this.state.todos) !==\n        this.state.todos.length\n    );\n  }\n\n  render() {\n    const todos = this.state.todos;\n\n    return (\n      <div className=\"content\">\n        <TodoInput\n          onEnter={this.handleAddTodo}\n          onActivateAll={this.handleActivateAll}\n        />\n        <TodoList\n          todos={this.getFilteredTodos(todos, this.state.activeFilter)}\n          onStateUpdate={this.handleTodoListUpdate}\n        />\n        <InfoBox\n          activeFilter={this.state.activeFilter}\n          onFilterUpdate={this.handleFilterUpdate}\n          onClearcompleted={this.handleClearcompleted}\n          remainingTodoCount={helperFunctions.getRemainingCount(\n            this.state.todos\n          )}\n          showClearCompleted={this.shouldShowClearCompleted()}\n        />\n      </div>\n    );\n  }\n}\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport TodoContainer from \"./components/TodoContainer\";\n\nexport default class App extends Component {\n  render() {\n    return (\n      <div className=\"app-container\">\n        <div className=\"header\">todos</div>\n        <TodoContainer />\n      </div>\n    );\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}